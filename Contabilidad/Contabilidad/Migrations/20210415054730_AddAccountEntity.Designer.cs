// <auto-generated />
using System;
using Contabilidad.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Accounting.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210415054730_AddAccountEntity")]
    partial class AddAccountEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Accounting.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CreditAmount")
                        .HasColumnType("float");

                    b.Property<double>("DebitAmount")
                        .HasColumnType("float");

                    b.Property<int>("IdAccountingAccount")
                        .HasColumnType("int");

                    b.Property<int>("IdAccountingEntry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountingAccount");

                    b.HasIndex("IdAccountingEntry");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Contabilidad.Models.AccountType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Activos",
                            Origin = "DB",
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            Description = "Pasivos",
                            Origin = "CR",
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            Description = "Capital",
                            Origin = "CR",
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            Description = "Ingresos",
                            Origin = "CR",
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            Description = "Costos",
                            Origin = "DB",
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            Description = "Gastos",
                            Origin = "DB",
                            Status = true
                        });
                });

            modelBuilder.Entity("Contabilidad.Models.AccountingAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAccountType")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MajorAccount")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TransactionsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("IdAccountType");

                    b.ToTable("AccountingAccount");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Balance = 0.0,
                            Description = "Activos",
                            IdAccountType = 1,
                            Level = 1,
                            MajorAccount = 0,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 2,
                            Balance = 0.0,
                            Description = "Efectivos en caja y banco",
                            IdAccountType = 1,
                            Level = 2,
                            MajorAccount = 1,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 3,
                            Balance = 0.0,
                            Description = "Caja Chica",
                            IdAccountType = 1,
                            Level = 3,
                            MajorAccount = 2,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 4,
                            Balance = 0.0,
                            Description = "Cuenta Corriente Banco X",
                            IdAccountType = 1,
                            Level = 3,
                            MajorAccount = 3,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 5,
                            Balance = 0.0,
                            Description = "Inventarios y Mercancias",
                            IdAccountType = 1,
                            Level = 2,
                            MajorAccount = 1,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 6,
                            Balance = 0.0,
                            Description = "Inventario",
                            IdAccountType = 1,
                            Level = 3,
                            MajorAccount = 5,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 7,
                            Balance = 0.0,
                            Description = "Cuentas x Cobrar",
                            IdAccountType = 1,
                            Level = 2,
                            MajorAccount = 1,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 8,
                            Balance = 0.0,
                            Description = "Cuentas x Cobrar Cliente X",
                            IdAccountType = 1,
                            Level = 3,
                            MajorAccount = 7,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 12,
                            Balance = 0.0,
                            Description = "Ventas",
                            IdAccountType = 4,
                            Level = 2,
                            MajorAccount = 9,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 13,
                            Balance = 0.0,
                            Description = "Ingresos x Ventas",
                            IdAccountType = 4,
                            Level = 3,
                            MajorAccount = 12,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 47,
                            Balance = 0.0,
                            Description = "Gastos",
                            IdAccountType = 6,
                            Level = 1,
                            MajorAccount = 0,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 48,
                            Balance = 0.0,
                            Description = "Gastos Administrativos",
                            IdAccountType = 6,
                            Level = 2,
                            MajorAccount = 47,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 50,
                            Balance = 0.0,
                            Description = "Gastos Generales",
                            IdAccountType = 6,
                            Level = 3,
                            MajorAccount = 48,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 65,
                            Balance = 0.0,
                            Description = "Gasto depreciación Activos Fijos",
                            IdAccountType = 6,
                            Level = 2,
                            MajorAccount = 47,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 66,
                            Balance = 0.0,
                            Description = "Depreciación Acumulada Activos Fijos",
                            IdAccountType = 6,
                            Level = 3,
                            MajorAccount = 65,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 70,
                            Balance = 0.0,
                            Description = "Salarios y Sueldos Empleados",
                            IdAccountType = 2,
                            Level = 3,
                            MajorAccount = 18,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 71,
                            Balance = 0.0,
                            Description = "Gastos de Nomina Empresa",
                            IdAccountType = 6,
                            Level = 3,
                            MajorAccount = 58,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 80,
                            Balance = 0.0,
                            Description = "Compra de Mercancias",
                            IdAccountType = 5,
                            Level = 3,
                            MajorAccount = 78,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 81,
                            Balance = 0.0,
                            Description = "Cuentas x Pagar",
                            IdAccountType = 2,
                            Level = 2,
                            MajorAccount = 19,
                            Status = true,
                            TransactionsEnabled = false
                        },
                        new
                        {
                            ID = 82,
                            Balance = 0.0,
                            Description = "Cuentas x Pagar Proveedor X",
                            IdAccountType = 2,
                            Level = 3,
                            MajorAccount = 81,
                            Status = true,
                            TransactionsEnabled = true
                        },
                        new
                        {
                            ID = 83,
                            Balance = 0.0,
                            Description = "Cuentas Cheques en Banco X",
                            IdAccountType = 1,
                            Level = 3,
                            MajorAccount = 3,
                            Status = true,
                            TransactionsEnabled = true
                        });
                });

            modelBuilder.Entity("Contabilidad.Models.AccountingEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAuxiliarSystem")
                        .HasColumnType("int");

                    b.Property<string>("MovementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("IdAuxiliarSystem");

                    b.ToTable("AccountingEntry");
                });

            modelBuilder.Entity("Contabilidad.Models.AuxiliarSystem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("AuxiliarSystem");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Contabilidad",
                            State = true
                        },
                        new
                        {
                            ID = 2,
                            Name = "Nomina",
                            State = true
                        },
                        new
                        {
                            ID = 3,
                            Name = "Facturacion",
                            State = true
                        },
                        new
                        {
                            ID = 4,
                            Name = "Inventario",
                            State = true
                        },
                        new
                        {
                            ID = 5,
                            Name = "Cuentas X Cobrar",
                            State = true
                        },
                        new
                        {
                            ID = 6,
                            Name = "Cuentas x Pagar",
                            State = true
                        },
                        new
                        {
                            ID = 7,
                            Name = "Compras",
                            State = true
                        },
                        new
                        {
                            ID = 8,
                            Name = "Activos Fijos",
                            State = true
                        },
                        new
                        {
                            ID = 9,
                            Name = "Cheques",
                            State = true
                        });
                });

            modelBuilder.Entity("Contabilidad.Models.CurrencyType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LastExchangeRate")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("CurrencyType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Peso",
                            LastExchangeRate = 1.0,
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            Description = "Dolar",
                            LastExchangeRate = 45.869999999999997,
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            Description = "Euro",
                            LastExchangeRate = 57.890000000000001,
                            Status = true
                        });
                });

            modelBuilder.Entity("Accounting.Models.Account", b =>
                {
                    b.HasOne("Contabilidad.Models.AccountingAccount", "AccountingAccount")
                        .WithMany("Accounts")
                        .HasForeignKey("IdAccountingAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contabilidad.Models.AccountingEntry", "AccountingEntry")
                        .WithMany("Accounts")
                        .HasForeignKey("IdAccountingEntry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountingAccount");

                    b.Navigation("AccountingEntry");
                });

            modelBuilder.Entity("Contabilidad.Models.AccountingAccount", b =>
                {
                    b.HasOne("Contabilidad.Models.AccountType", "AccountType")
                        .WithMany("AccountingAccounts")
                        .HasForeignKey("IdAccountType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("Contabilidad.Models.AccountingEntry", b =>
                {
                    b.HasOne("Contabilidad.Models.AuxiliarSystem", "AuxiliarSystem")
                        .WithMany("AccountingEntry")
                        .HasForeignKey("IdAuxiliarSystem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuxiliarSystem");
                });

            modelBuilder.Entity("Contabilidad.Models.AccountType", b =>
                {
                    b.Navigation("AccountingAccounts");
                });

            modelBuilder.Entity("Contabilidad.Models.AccountingAccount", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Contabilidad.Models.AccountingEntry", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Contabilidad.Models.AuxiliarSystem", b =>
                {
                    b.Navigation("AccountingEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
